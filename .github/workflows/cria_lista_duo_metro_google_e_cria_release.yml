name: Cria a lista do Duo e Metro SP via Google e cria release
on:
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  MAX_RESTAURANTES: ${{ vars.MAX_RESTAURANTES }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  GH_TOKEN: ${{ github.token }}

jobs:
  run-script-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate current date tag
      id: date-tag
      run: |
        CURRENT_DATE=$(date +'%Y%m%d')
        echo "tag_name=v$CURRENT_DATE" >> $GITHUB_OUTPUT
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Python script
      run: python duo_google.py || { echo "Script failed"; exit 1; }
      
    - name: Check if CSV exists
      run: test -f restaurantes_com_metro_google.csv || { echo "CSV file not found"; exit 1; }

    - name: Install GitHub CLI and jq
      run: |
        sudo apt-get update
        sudo apt-get install -y gh jq

    - name: Get previous artifact
      id: get-previous-artifact
      continue-on-error: true
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Lista todos os artifacts
        ARTIFACTS_JSON=$(gh api repos/${{ github.repository }}/actions/artifacts)
        
        # Filtra pelo artifact "restaurantes_csv" e pega o mais recente (excluindo o atual se existir)
        PREV_ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r '.artifacts[] | select(.name == "restaurantes_csv") | .id' | sort -nr | head -2 | tail -1)
        
        if [ -z "$PREV_ARTIFACT_ID" ]; then
          echo "No previous artifact found"
          echo "has_previous=false" >> $GITHUB_OUTPUT
        else
          echo "Found previous artifact ID: $PREV_ARTIFACT_ID"
          echo "has_previous=true" >> $GITHUB_OUTPUT
          echo "prev_artifact_id=$PREV_ARTIFACT_ID" >> $GITHUB_OUTPUT
          
          # Download do artifact usando redirecionamento
          curl -L -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$PREV_ARTIFACT_ID/zip > previous_artifact.zip
          
          mkdir temp_artifact
          unzip previous_artifact.zip -d temp_artifact
          mv temp_artifact/restaurantes_com_metro_google.csv ./restaurantes_com_metro_google_anterior.csv
          rm -rf temp_artifact previous_artifact.zip
          echo "Previous artifact downloaded and extracted"
          # Verifica se o arquivo CSV anterior existe
          if [ ! -f restaurantes_com_metro_google_anterior.csv ]; then
            echo "Previous CSV file not found"
            exit 1
          fi
        fi
        
    - name: Generate release notes
      id: generate-release-notes
      run: |
        if [ "${{ steps.get-previous-artifact.outputs.has_previous }}" = "true" ]; then
          echo "Running diff.py..."
          RELEASE_NOTES=$(python diff.py)
        else
          RELEASE_NOTES="Primeira versÃ£o da lista de restaurantes"
        fi
        echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: restaurantes_csv
        path: restaurantes_com_metro_google.csv
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.date-tag.outputs.tag_name }}
        release_name: Release ${{ steps.date-tag.outputs.tag_name }}
        body: ${{ steps.generate-release-notes.outputs.release_notes }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./restaurantes_com_metro_google.csv
        asset_name: restaurantes_com_metro_google.csv
        asset_content_type: text/csv